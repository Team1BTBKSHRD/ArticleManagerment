public class submanagement extends Managements implements ISort {
	/*
	 * Author : Pisal, Chetra (Sort Mission)
	 */
	@Override
	public void sort(ArrayList<Article> ls, boolean order, int sortby) {
		/*
		 * Sort Method provide sorted by Asc or Desc follow by boolean
		 * order(true:Desc,false:Asc) sortBy ID,Author,Title,ModifiedDate ID:1,
		 * Author:2, Title:3, ModifiedDate:4
		 */
		// TODO Auto-generated method stub
		if (order) {
			// true : Descending
			// 1 : Id
			// 2 : Author
			// 3 : Title
			// 4 : ModifiedDate
			switch (sortby) {
			case 1: // sort by Id
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o2.getId() > o1.getId() ? 1 : -1;
					}

				});
				break;

			case 2:// sort by Author
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o2.getAuthor().compareTo(o1.getAuthor());
					}

				});
				break;

			case 3:// sort by Title
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o2.getTitle().compareTo(o1.getTitle());
					}

				});
				break;
			case 4:// sort by ModifiedDate
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o2.getModifiedDate().compareTo(
								o1.getModifiedDate());
					}

				});
				break;
			default:
				System.out.println("invalid numbers");
				break;
			}
		} else {
			// false : ascending
			// 1 : Id
			// 2 : Author
			// 3 : Title
			// 4 : ModifiedDate
			switch (sortby) {
			case 1: // sort by Id
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o2.getId() < o1.getId() ? 1 : -1;
					}

				});
				break;

			case 2:// sort by Author
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o1.getAuthor().compareTo(o2.getAuthor());
					}

				});
				break;

			case 3:// sort by Title
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o1.getTitle().compareTo(o2.getTitle());
					}

				});
				break;
			case 4:// sort by ModifiedDate
				Collections.sort(ls, new Comparator<Article>() {

					@Override
					public int compare(Article o1, Article o2) {
						// TODO Auto-generated method stub
						return o1.getModifiedDate().compareTo(
								o2.getModifiedDate());
					}

				});
				break;
			default:
				System.out.println("invalid numbers");
				break;
			}
		}
	}

	@Override
	void add() {
		// TODO Auto-generated method stub

	}

	@Override
	void remove() {
		// TODO Auto-generated method stub

	}

	@Override
	void update() {
		// TODO Auto-generated method stub

	}

	@Override
	void search() {
		// TODO Auto-generated method stub

	}

}
